#!/usr/bin/env ruby
require "fileutils"

def setup
  log "Installing gems"
  # bundle install only if bundle check returns false
  system! "bundle check || bundle install"

  log "Installing Node modules"
  # yarn install only if yarn check returns false
  # --check-files is usd to force Yarn to examine node_modules folder
  system! "bin/yarn check --check-files || bin/yarn install"

  log "Dropping and recreating the development database"
  # The first time this runs, db:reset will fail, but this
  # failure is fixed by doing db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"

  log "Dropping and recreating the test database"
  # Setting the RAILS_ENV explicitly to be sure,
  # we reset the test database
  system!({ "RAILS_ENV" => "test"}, "bin/rails db:reset")

  log "All set up"
  log ""
  log "To see commonly needed commands, run:"
  log ""
  log "    bin/setup help"
  log ""
end

def help
  log "Useful commands:"
  log ""
  log "   bin/run"
  log "    # run app locally"
  log ""
  log "   bin/ci"
  log "    # runs all tests and checks like CI"
  log ""
  log "   bin/rails test"
  log "    # run non-system tests"
  log ""
  log "   bin/rails test:system"
  log "    # run system tests"
  log ""
  log "   bin/setup help"
  log "     # show this help"
  log ""
end

=begin
  Start of helpers
  Setup method does not do all the error checking.
  We want to explicitly log what we are executing,
  so we use this method instead of Kernel#system and friends
=end

def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

=begin
  It's helpful to know what messages come
  from this script, so we'll use log
  instead of puts to communicate to the user
=end

def log(message)
  puts "[ bin/setup ] #{message}"
end

if ARGV[0] == "help"
  help
else
  setup
end
